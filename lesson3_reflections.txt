1: When would you want to use a remote repository rather than keeping all your work local?

You would use a remote repo when:
  - you are working on a colloborative project with multiple people
  - you are working on your code from multiple computers
  - you want to share a project you are working on
  - you want an online backup of your code

2: Why might you want to always pull changes manually rather than having Git
automatically stay up to date with your remote repository?

There may be changes/commits in the remote repo that add new features or change
the code drastically. You may have been working on an older version for a
while. Pulling these automatically runs the risk of you losing track of your
code or even having your changes overwritten. You might also not want the
lastest commits.

3: Describe the differences between forks, clones, and branches. When would you
use one instead of another?

Clones - when you clone a remote, or local, repo to a local drive. Cloning
clones the remote reference that is present or associated with the remote repo.
Clone is used when you want to get all the contents of a repo from another
location so that you can work on it.

Branch - creates a new label for a commit history and allows a non-linear
commit history. When creating a branch the new branch contains all the commits
from the branch from which it was created but all new commits will be unique to
the new branch only. Branching is used when you want to add new features,
experiment etc without affecting the main branch that others might be using or
rely on. You can also version control these new commits with no impact on the
other branches.

Fork - creates a remote copy of an existing remote repo. This creates the copy
of a repo on GitHub but still on the GitHub Servers. The forked repo is linked
to or references the repo from which it was forked. Forking is useful if you
want to contribute to a project or make your own changes without affecting the
originator's repo or if you do not have permissions to do so.

4: What is the benefit of having a copy of the last known state of the remote
stored locally?

With un update version of the remote stored locally, you can access all the
commits that may have come after your last pull, even if you are offline. This
way you can continue developing on your local branch, and then compare it to
the remote branch and resolve conflicts without requiring access to the
internet. It also allows you to compare the changes you have to the remote
repo.

5: How would you collaborate without using Git or GitHub?

Simple answer: I wouldn't. This would require something like DropBox
or a google drive account or even copying files between users. Oh No!

6: When would you want to make changes in a separate branch rather than
directly in master? What benefits does each approach have?

When you want to work on the code without affecting master and while still
mainintaining backups of your code. For example implementing new features,
experimenting with new method etc. You don't want these to go into master until
they are tried and tested, but you want it to be available for collaboration
and review and backup.

Making changes in master is beneficial if you are making quick and easy bug
fixes. Because master is like the production branch - you always want it up to
date and fully working and stable.
